==21437== Helgrind, a thread error detector
==21437== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==21437== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==21437== Command: ./race
==21437== 
==21437== ---Thread-Announcement------------------------------------------
==21437== 
==21437== Thread #4 was created
==21437==    at 0x49979F3: clone (clone.S:76)
==21437==    by 0x49988EE: __clone_internal (clone-internal.c:83)
==21437==    by 0x49066D8: create_thread (pthread_create.c:295)
==21437==    by 0x49071FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==21437==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==21437==    by 0x1092C3: main (race.c:19)
==21437== 
==21437== ---Thread-Announcement------------------------------------------
==21437== 
==21437== Thread #3 was created
==21437==    at 0x49979F3: clone (clone.S:76)
==21437==    by 0x49988EE: __clone_internal (clone-internal.c:83)
==21437==    by 0x49066D8: create_thread (pthread_create.c:295)
==21437==    by 0x49071FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==21437==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==21437==    by 0x1092C3: main (race.c:19)
==21437== 
==21437== ----------------------------------------------------------------
==21437== 
==21437== Possible data race during read of size 8 at 0x10C018 by thread #4
==21437== Locks held: none
==21437==    at 0x10920B: square (race.c:9)
==21437==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==21437==    by 0x4906AC2: start_thread (pthread_create.c:442)
==21437==    by 0x4997A03: clone (clone.S:100)
==21437== 
==21437== This conflicts with a previous write of size 8 by thread #3
==21437== Locks held: none
==21437==    at 0x109215: square (race.c:9)
==21437==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==21437==    by 0x4906AC2: start_thread (pthread_create.c:442)
==21437==    by 0x4997A03: clone (clone.S:100)
==21437==  Address 0x10c018 is 0 bytes inside data symbol "accum"
==21437== 
==21437== ----------------------------------------------------------------
==21437== 
==21437== Possible data race during write of size 8 at 0x10C018 by thread #4 //example whewe there might be a race condition
==21437== Locks held: none
==21437==    at 0x109215: square (race.c:9)
==21437==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==21437==    by 0x4906AC2: start_thread (pthread_create.c:442)
==21437==    by 0x4997A03: clone (clone.S:100)
==21437== 
==21437== This conflicts with a previous write of size 8 by thread #3
==21437== Locks held: none
==21437==    at 0x109215: square (race.c:9)
==21437==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==21437==    by 0x4906AC2: start_thread (pthread_create.c:442)
==21437==    by 0x4997A03: clone (clone.S:100)
==21437==  Address 0x10c018 is 0 bytes inside data symbol "accum"
==21437== 
2870
==21437== 
==21437== Use --history-level=approx or =none to gain increased speed, at
==21437== the cost of reduced accuracy of conflicting-access information
==21437== For lists of detected and suppressed errors, rerun with: -s
==21437== ERROR SUMMARY: 36 errors from 2 contexts (suppressed: 344 from 20)



//Thread #3 was writing to accum while Thread #4 was either reading or writing to the same variable, leading to inconsistent behavior
